/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import prom.AuthenticateFile;
import prom.forOrder;



/**
 *
 * @author AlphaBeta's
 */

public class Menu_GUI extends javax.swing.JFrame {
    private String userId;
    
    public Menu_GUI(String userId) {
        this.userId = userId;
    }  

    /**
     * Creates new form menu_GUI
     */
    public Menu_GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        menutable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        showmenu = new javax.swing.JTable();
        addbtn = new javax.swing.JButton();
        removebtn = new javax.swing.JButton();
        orderbtn = new javax.swing.JButton();
        comboBox = new javax.swing.JComboBox<>();
        orderTextArea = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        backbtn = new javax.swing.JButton();
        viewbtn = new javax.swing.JButton();
        datefield = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("!!!MENU!!!");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(319, 10, -1, -1));

        menutable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(menutable);
        if (menutable.getColumnModel().getColumnCount() > 0) {
            menutable.getColumnModel().getColumn(0).setResizable(false);
            menutable.getColumnModel().getColumn(1).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 39, 224, 212));

        showmenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Price"
            }
        ));
        jScrollPane2.setViewportView(showmenu);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 39, 383, 212));

        addbtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        addbtn.setText("Add");
        addbtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });
        getContentPane().add(addbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 270, 110, 30));

        removebtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        removebtn.setText("Remove");
        removebtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        removebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removebtnActionPerformed(evt);
            }
        });
        getContentPane().add(removebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 310, 110, 30));

        orderbtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        orderbtn.setText("Order");
        orderbtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        orderbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderbtnActionPerformed(evt);
            }
        });
        getContentPane().add(orderbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 270, 120, 30));

        comboBox.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Drinks", "Snacks", "Desserts" }));
        comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(comboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(275, 159, -1, -1));
        getContentPane().add(orderTextArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(631, 291, 124, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Total");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(583, 294, -1, -1));

        backbtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backbtn.setText("<<Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });
        getContentPane().add(backbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        viewbtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        viewbtn.setText("View");
        viewbtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        viewbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewbtnActionPerformed(evt);
            }
        });
        getContentPane().add(viewbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 310, 120, 30));

        datefield.setForeground(new java.awt.Color(198, 203, 186));
        datefield.setText("Enter Today's Date");
        getContentPane().add(datefield, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 113, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu.png"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, -4, 880, 360));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxActionPerformed
        DefaultTableModel menu = (DefaultTableModel) menutable.getModel();
        String selectedCategory = (String) comboBox.getSelectedItem();
        loadItemBycategory("D:\\netbeans_projects\\JavaApplication2\\textfile\\menu.txt", selectedCategory, menu);
      
    }//GEN-LAST:event_comboBoxActionPerformed

    
    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
     int selectedRow = menutable.getSelectedRow();
      DefaultTableModel menu = (DefaultTableModel) menutable.getModel();
      DefaultTableModel showTableModel = (DefaultTableModel)showmenu.getModel();
     if (selectedRow>=0){
         ArrayList<Object> rowData =  new ArrayList<>(menu.getDataVector().get(selectedRow));
         showTableModel.addRow(rowData.toArray());
         
     }
    }//GEN-LAST:event_addbtnActionPerformed

    private void orderbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderbtnActionPerformed
  
    DefaultTableModel model = (DefaultTableModel) showmenu.getModel();
    double totalCost = calculateTotalCost(model);
    String userId = this.userId;
    
    // Retrieve the date from the dateTextField
    String enteredDate = datefield.getText();
        
    if (enteredDate.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a date.", "Date Not Entered", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    int orderid = generateUniqueOrderId();
    ArrayList<String> items = retriveItemsFromTable(model);
    
    forOrder order = new forOrder(enteredDate, orderid, items, totalCost);
    orderTextArea.setText(Double.toString(totalCost));
    
        try {
            // Write order data including the entered date
            writeDataToFile(order, enteredDate, totalCost);
        } catch (IOException ex) {
            Logger.getLogger(Menu_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        orderTextArea.setText(Double.toString(totalCost));
    
    JOptionPane.showMessageDialog(this, "Total Cost: " + Double.toString(totalCost));
    }//GEN-LAST:event_orderbtnActionPerformed

    public double calculateTotalCost(DefaultTableModel model){
        double totalCost = 0.0;
        
        for(int i = 0; i < model.getColumnCount(); i++){
            Object itemPrice = model.getValueAt(i,1);
            
            if(itemPrice instanceof String){
                try {
                    
                    double price = Double.parseDouble((String) itemPrice);
                    totalCost += price;
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            }
        }
        return totalCost;
    }
    
    
    
    
    private int orderIdCounter = 01;
    
    private int generateUniqueOrderId(){
        return orderIdCounter++;
    }
    private ArrayList<String> retriveItemsFromTable(DefaultTableModel model){
        ArrayList<String> items = new ArrayList<>();
        
        int rowCount = model.getRowCount();
        
        for(int i = 0; i < rowCount; i++){
        
        String itemName = (String) model.getValueAt(i,0);
        String itemPrice = String.valueOf(model.getValueAt(i,1));
        
        String itemDetails = itemName+ "-RM" + itemPrice;
        items.add(itemDetails);
    }
      return items;
    } 
    
    private void removebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removebtnActionPerformed
        int selectedRow = showmenu.getSelectedRow();
        
        if(selectedRow >= 0){
            DefaultTableModel showmenumodel = (DefaultTableModel) showmenu.getModel();
            Object[] rowData = new Object[showmenumodel.getColumnCount()];
            for(int col = 0; col < showmenumodel.getColumnCount(); col++){
                rowData[col] = showmenumodel.getValueAt(selectedRow, col);
            }
            showmenumodel.removeRow(selectedRow);
        }
        else{
            JOptionPane.showMessageDialog(this,"Please select one row to remove;");
        }
    }//GEN-LAST:event_removebtnActionPerformed

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        User_DashBoard std = new User_DashBoard("");
        this.hide();
        std.setVisible(true);
    }//GEN-LAST:event_backbtnActionPerformed

    private void viewbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewbtnActionPerformed
           Order_View ord = new Order_View();
           this.hide();
           ord.setVisible(true);
         
    }//GEN-LAST:event_viewbtnActionPerformed
    private AuthenticateFile auth = new AuthenticateFile(null);
    
 private static void writeDataToFile(forOrder order,String enteredDate, double totalCost) throws IOException {
    String tmpFileName = "D:\\netbeans_projects\\JavaApplication2\\textfile\\ordertmp.txt";
    try (BufferedWriter orderWriter = new BufferedWriter(new FileWriter(tmpFileName, true))) {
        // Format the order data with a clear structure
        orderWriter.write("Order ID: " + order.getOrderId());
        orderWriter.newLine();
        orderWriter.newLine();
        orderWriter.write("Items: [");
        for (String item : order.getItems()) {
            orderWriter.write(item);
            orderWriter.write(", ");
        }
        orderWriter.write("]");
        orderWriter.newLine();
        orderWriter.write("Total Price: " + order.getTotaPrice());
        orderWriter.newLine();
        orderWriter.write("Date: " + enteredDate); // Include the entered date
        orderWriter.newLine();
        orderWriter.newLine(); // Add a blank line to separate orders
        orderWriter.flush();
    } catch (Exception e) {
        e.printStackTrace();
    }
    }






private static void printOrder(String orderText){
    System.out.println("Printing Order:\n"+ orderText);
}
    
    private static void loadItemBycategory(String fileName,String selectedCategory, DefaultTableModel tableModel){
        try(BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            tableModel.setRowCount(0);            
            while((line = reader.readLine())!= null){
                String[] parts = line.split(",");
                if(parts.length == 5 && (selectedCategory.equals("All") || parts[0].trim().equals(selectedCategory))){
                    tableModel.addRow(new Object[]{parts[2],parts[3],parts[4]});
                }
            }
            
        } catch (Exception e) {
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JButton backbtn;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JTextField datefield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable menutable;
    private javax.swing.JTextField orderTextArea;
    private javax.swing.JButton orderbtn;
    private javax.swing.JButton removebtn;
    private javax.swing.JTable showmenu;
    private javax.swing.JButton viewbtn;
    // End of variables declaration//GEN-END:variables
}
